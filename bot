#!/usr/bin/env python
# pylint: disable=C0116,W0613
# This program is dedicated to the public domain under the CC0 license.

"""
Simple Bot to reply to Telegram messages.
First, a few handler functions are defined. Then, those functions are passed to
the Dispatcher and registered at their respective places.
Then, the bot is started and runs until we press Ctrl-C on the command line.
Usage:
Basic Echobot example, repeats messages.
Press Ctrl-C on the command line or send a signal to the process to stop the
bot.
"""
import logging
import json
from optparse import Values
from numpy import int0
from telegram import Update, ForceReply
import telegram
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext, CallbackQueryHandler
from openpyxl import load_workbook
import matplotlib.pyplot as plt
import pandas as pd
from pandas.plotting import table
from telegram.ext.dispatcher import Dispatcher
from telegram.files.document import Document
from telegram.inline.inlinekeyboardmarkup import InlineKeyboardMarkup , InlineKeyboardButton

# Enable logging1
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)

logger = logging.getLogger(__name__)

NM = range(1)

#Define a pasta do excel que vai usar.
WORKBOOK  = "C:\\Users\\N-ARR-OPE-0030U\\OneDrive - Grupo Mirassol\\Imagens\\disponibilidade.xlsx"
WORKSHEET = "disp"
dataframe = pd.read_excel(WORKBOOK)

 # Get the dispatcher to register handlers
updater = Updater("1919012198:AAH6EsRUbTgjRVj_2hux17r8rRha6Bj95-o")
dispatcher = updater.dispatcher

# Define a few command handlers. These usually take the two arguments update and
# context.
def start(update: Update, context: CallbackContext) -> None:
    """Send a message when the command /start is issued."""
    keyboard = [
        [
            InlineKeyboardButton("Consultar NM", callback_data='consultnm'),
            InlineKeyboardButton("Consultar Posição", callback_data='consultPos'),
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard, OneTimeKeyboard = 'true')
    user = update.effective_user
    update.message.reply_markdown_v2(
        f'Olá, {user.mention_markdown_v2()}\!',reply_markup=reply_markup)


def consultnm(update: Update, context: CallbackContext) -> None:
    """Consultar NM"""
    user = update.effective_user
    query = update.callback_query
    query.message.reply_text(f"Informe o NM a Consultar: ")
    
    
def nm(update: Update, context: CallbackContext) -> None:
    """Consultar NM1"""
    query = update.callback_query
    
    

def consultPos(update: Update, context: CallbackContext) -> None:
    """Consultar Pos"""
    query = update.callback_query
    query.message.reply_photo(open("C:\\Users\\N-ARR-OPE-0030U\\OneDrive - Grupo Mirassol\\Imagens\\Programado Fora do gestão Embarcada.jpg","rb"))
    query.message.reply_document(open("C:\\Users\\N-ARR-OPE-0030U\\OneDrive - Grupo Mirassol\\Imagens\\Programado Fora do gestão Embarcada.xlsx","rb"))


def main() -> None:

    """ em comandos diferentes - responder no telegrama"""
    dispatcher.add_handler(CommandHandler("start", start))  
    """Consulta NM"""
    dispatcher.add_handler(MessageHandler(Filters.text ("consultnm")  & ~Filters.command, consultnm))
    dispatcher.add_handler(CallbackQueryHandler(consultnm,pattern="consultnm"))
    
    dispatcher.add_handler(MessageHandler(Filters.text, nm))

    """Consulta Pos"""
    dispatcher.add_handler(MessageHandler(Filters.text ("consultPos")  & ~Filters.command, consultPos))
    dispatcher.add_handler(CallbackQueryHandler(consultPos,pattern="consultPos"))
    
    # Start the Bot
    updater.start_polling()

    # Execute o bot até pressionar Ctrl-C ou o processo recebe SIGINT,
    # SIGTERM ou SIGABRT. Isso deve ser usado na maioria das vezes, uma vez que
    # start_polling () não bloqueia e irá parar o bot normalmente.
    updater.idle()


if __name__ == '__main__':
    main()
